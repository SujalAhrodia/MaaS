---
- hosts: localhost
  user: root
  become_method: sudo
  become: yes
  vars_files:
    - ./vars/config.yml
  vars:
    tVar: "{{ lookup('file', './inputs/input.json') | from_json }}"
  
  tasks:
  - name: List of namespaces
    command: ip netns list
    register: ns
  
  - name: Make list of existing namespaces
    set_fact:
      nslist: "{{ns.stdout}}"
  
  - name: Creating sid_list
    include_tasks: ./step1.yml
    with_items:
      - "{{tVar.input}}"
    loop_control:
      loop_var: outer_item
  
  # - name: Create counter file
  #   file: 
  #     path: "{{ item.path }}" 
  #     state: "{{ item.state }}"
  #   with_items:
  #     - { path: './counter.yml', state: 'absent' }
  #     - { path: './counter.yml', state: 'touch' }

  # - name: Managing counter file
  #   lineinfile: 
  #     dest: ./counter.yml
  #     line: '2'

  - include_role:
      name: create_subnet_ns
    with_items:
      - "{{tVar.input}}"
    when: '"{{item.id}}sr" not in nslist'
    
  - include_role:
      name: create_tenant_ns
    with_nested:
      - "{{tVar.input}}"
      - "{{sid_list}}"

    # - name: Install OVS
    #   package:
    #     name: openvswitch-switch
    #     state: present
    # - name: Create OVS Switch
    #   shell: ovs-vsctl --may-exist add-br "ovs_{{ item }}"
    #   with_items: "{{ bridge_name }}"
    #   tags: test
    # - name: Ansible create netl3.xml for the OVS Bridge
    #   copy:
    #     dest: "/etc/libvirt/qemu/networks/net_{{ item }}.xml"
    #     content: |
    #       <network>
    #         <name>net_{{ item  }}</name>
    #         <bridge name= 'ovs_{{ item }}'/>
    #         <virtualport type='openvswitch'/>
    #         <forward mode="bridge"/>
    #       </network>
    #   with_items: "{{ bridge_name }}"
    #   tags: test
    # - name: Define the Network
    #   shell: |
    #     virsh net-define /etc/libvirt/qemu/networks/net_{{ item }}.xml
    #     virsh net-start net_{{ item }}
    #   with_items: "{{ bridge_name }}"
    #   tags: test
    # - name: Add IP address to OVS SVI
    #   shell: sudo ip addr add '{{ item.value.IP }}' dev 'ovs_{{ item.key }}'
    #   when: item.value.type != 'bridge'
    #   loop: "{{ bridges|dict2items }}"
